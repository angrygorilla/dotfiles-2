#!/usr/bin/env bash

# has to come after zsh or bashrc are sourced, because it overwrites those files.
$PWD/dependencies/fzf/install --all

# install powerline fonts
$PWD/dependencies/powerline-fonts/install.sh

# install pyenv plugins
PYENV_PLUGINS_DIR=$(realpath $PWD/dependencies/pyenv/plugins/)
mkdir -p $PYENV_PLUGINS_DIR

if [ ! -d $PYENV_PLUGINS_DIR/pyenv-update ]; then
    git clone git://github.com/pyenv/pyenv-update.git $PYENV_PLUGINS_DIR/pyenv-update
fi
if [ ! -d $PYENV_PLUGINS_DIR/pyenv-virtualenv ]; then
    git clone git://github.com/pyenv/pyenv-virtualenv.git $PYENV_PLUGINS_DIR/pyenv-virtualenv
fi
if [ ! -d $PYENV_PLUGINS_DIR/pyenv-ccache ]; then
    git clone git://github.com/pyenv/pyenv-ccache.git $PYENV_PLUGINS_DIR/pyenv-ccache
fi
if [ ! -d $PYENV_PLUGINS_DIR/pyenv-doctor ]; then
    git clone git://github.com/pyenv/pyenv-doctor.git $PYENV_PLUGINS_DIR/pyenv-doctor
fi
if [ ! -d $PYENV_PLUGINS_DIR/pyenv-install-latest ]; then
    git clone https://github.com/momo-lab/pyenv-install-latest.git $PYENV_PLUGINS_DIR/pyenv-install-latest
fi

# install nodenv plugins
NODENV_PLUGINS_DIR=$(realpath $PWD/dependencies/nodenv/plugins)
mkdir -p $NODENV_PLUGINS_DIR

if [ ! -d $NODENV_PLUGINS_DIR/nodenv-update ]; then
    git clone https://github.com/nodenv/nodenv-update.git $NODENV_PLUGINS_DIR/nodenv-update
fi
if [ ! -d $NODENV_PLUGINS_DIR/nodenv-aliases ]; then
    git clone https://github.com/nodenv/nodenv-aliases.git $NODENV_PLUGINS_DIR/nodenv-aliases
fi
if [ ! -d $NODENV_PLUGINS_DIR/nodenv-package-json-engine ]; then
    git clone https://github.com/nodenv/nodenv-package-json-engine.git $NODENV_PLUGINS_DIR/nodenv-package-json-engine
fi
if [ ! -d $NODENV_PLUGINS_DIR/nodenv-package-rehash ]; then
    git clone https://github.com/nodenv/nodenv-package-rehash.git $NODENV_PLUGINS_DIR/nodenv-package-rehash
fi
if [ ! -d $NODENV_PLUGINS_DIR/nodenv-each ]; then
    git clone https://github.com/nodenv/nodenv-each.git $NODENV_PLUGINS_DIR/nodenv-each
fi
if [ ! -d $NODENV_PLUGINS_DIR/node-build ]; then
    git clone https://github.com/nodenv/node-build.git $NODENV_PLUGINS_DIR/node-build
fi

install_latest_dev() {
    echo "Installing python & node"

    local __LATEST_27
    local __LATEST_37

    __LATEST_27=$(pyenv install-latest -s 2.7 | sed s/Install\\s//g | sed s/\\.\\.\\.//g)
    __LATEST_37=$(pyenv install-latest -s 3.7 | sed s/Install\\s//g | sed s/\\.\\.\\.//g)

    export __LATEST_27
    export __LATEST_37

    nodenv install -s "$(cat ./node-system-version)"
}

init_neovim() (
    echo "Initializing neovim setup"

    if [ ! -d "${PYENV_ROOT}/versions/neovim2" ]; then
        pyenv virtualenv "${__LATEST_27}" neovim2
        "${PYENV_ROOT}"/versions/neovim2/bin/pip install --upgrade -r ./neovim-requirements.txt
    else
        echo "${PYENV_ROOT}/versions/neovim2 venv already exists"
    fi
    if [ ! -d "${PYENV_ROOT}/versions/neovim3" ]; then
        pyenv virtualenv "${__LATEST_37}" neovim3
        "${PYENV_ROOT}"/versions/neovim3/bin/pip install --upgrade -r ./neovim-requirements.txt
    else
        echo "${PYENV_ROOT}/versions/neovim3 venv already exists"
    fi

    if command -v npm >/dev/null 2>&1; then
        npm install -g neovim
        if command -v nodenv >/dev/null 2>&1; then
            nodenv rehash
        fi
    fi

)

init_python_system() (
    if [ ! -f $PWD/dependencies/pyenv/version ]; then
        echo "Initializing system wide python ${__LATEST_37}"
        echo "${__LATEST_37}" > $PWD/dependencies/pyenv/version
    fi
)

post_init_python_system () (
    pip install setuptools pip wakatime --upgrade
)

init_python_system && \
    post_init_python_system && \
    install_latest_dev && \
    init_neovim
